import sqlite3

def create_connection():
    return sqlite3.connect('hospital.db')

def create_table(conn):
    with conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS patients (
                        pid INTEGER PRIMARY KEY,
                        name TEXT,
                        address TEXT,
                        dob DATE,
                        gender TEXT,
                        blood_group TEXT,
                        phone TEXT
                        );''')
        conn.execute('''CREATE TABLE IF NOT EXISTS doctors (
                        did INTEGER PRIMARY KEY,
                        name TEXT,
                        specialization TEXT,
                        phone TEXT
                        );''')
        conn.execute('''CREATE TABLE IF NOT EXISTS appointments (
                        aid INTEGER PRIMARY KEY,
                        pid INTEGER,
                        did INTEGER,
                        date DATE,
                        time TEXT,
                        FOREIGN KEY (pid) REFERENCES patients(pid),
                        FOREIGN KEY (did) REFERENCES doctors(did)
                        );''')
        conn.execute('''CREATE TABLE IF NOT EXISTS treatments (
                        tid INTEGER PRIMARY KEY,
                        pid INTEGER,
                        did INTEGER,
                        diagnosis TEXT,
                        prescription TEXT,
                        date DATE,
                        FOREIGN KEY (pid) REFERENCES patients(pid),
                        FOREIGN KEY (did) REFERENCES doctors(did)
                        );''')

def insert_patient(conn, patient):
    with conn:
        try:
            conn.execute('INSERT INTO patients (pid, name, address, dob, gender, blood_group, phone) VALUES (?, ?, ?, ?, ?, ?, ?)', patient)
        except sqlite3.IntegrityError:
            print("Patient ID already exists.")

def insert_doctor(conn, doctor):
    with conn:
        conn.execute('INSERT INTO doctors (did, name, specialization, phone) VALUES (?, ?, ?, ?)', doctor)

def insert_appointment(conn, appointment):
    with conn:
        conn.execute('INSERT INTO appointments (aid, pid, did, date, time) VALUES (?, ?, ?, ?, ?)', appointment)

def insert_treatment(conn, treatment):
    with conn:
        conn.execute('INSERT INTO treatments (tid, pid, did, diagnosis, prescription, date) VALUES (?, ?, ?, ?, ?, ?)', treatment)

def update_phone(conn, name, new_phone):
    with conn:
        conn.execute('UPDATE patients SET phone = ? WHERE name = ?', (new_phone, name))

def delete_doctor(conn, specialization):
    with conn:
        conn.execute('DELETE FROM doctors WHERE specialization = ?', (specialization,))

def display_appointments(conn, doctor_id):
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM appointments WHERE did = ?', (doctor_id,))
    for row in cursor.fetchall():
        print(row)

def main():
    conn = create_connection()
    create_table(conn)

    patients = [
        (1, 'John Doe', '123 Main St', '1980-01-01', 'M', 'O+', '555-555-5555'),
        (2, 'Jane Smith', '456 Elm St', '1990-02-01', 'F', 'A+', '555-555-5556'),
        (3, 'Jim Brown', '789 Oak St', '1975-03-01', 'M', 'B+', '555-555-5557')
    ]
    for patient in patients:
        insert_patient(conn, patient)

    doctors = [
        (1, 'Dr. Alice', 'Cardiology', '555-555-5558'),
        (2, 'Dr. Bob', 'Neurology', '555-555-5559')
    ]
    for doctor in doctors:
        insert_doctor(conn, doctor)

    appointments = [
        (1, 1, 1, '2023-07-01', '10:00'),
        (2, 2, 2, '2023-07-02', '11:00'),
        (3, 3, 1, '2023-07-03', '09:00')
    ]
    for appointment in appointments:
        insert_appointment(conn, appointment)

    treatments = [
        (1, 1, 1, 'Hypertension', 'Medication A', '2023-07-01'),
        (2, 2, 2, 'Migraine', 'Medication B', '2023-07-02'),
        (3, 3, 1, 'Heart Disease', 'Medication C', '2023-07-03')
    ]
    for treatment in treatments:
        insert_treatment(conn, treatment)

    update_phone(conn, 'John Doe', '555-555-5550')
    delete_doctor(conn, 'Neurology')

    doctor_id = 1  # Replace this with user input if needed
    display_appointments(conn, doctor_id)

    conn.close()

if __name__ == "__main__":
    main()
